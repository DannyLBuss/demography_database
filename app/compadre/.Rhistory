}
for (i in 1:length(comadre$version)){
version[[i]]<-as.factor(paste(comadre$version[[i]]$Version, type="cmd"))
}
for (i in 1:length(comadre$version)){
version[[i]]<-as.factor(paste(shQuote(comadre$version[[i]]$Version, type="cmd"), collapse=", "))
}
for (i in 1:length(comadre$version)){
version[[i]]<-as.factor(paste(shQuote(comadre$version[[i]][,3], type="cmd"), collapse=", "))
}
head(comadre$version)
head(comadre$version$Version)
for (i in 1:length(comadre$version)){
version[[i]]<-as.factor(paste(shQuote(comadre$version[[i]]$Version, type="cmd"), collapse=", "))
}
head(comadre$version$Version)
(comadre$version$Version)
version<-"2.0.1"
version<-as.list(factor(length(comadre$version)))
version<-as.list("2.0.1")
version<-as.list(factor(length(comadre$version)))
version<-lapply("2.0.1")
version<-c("2.0.1")
version<-as.list(factor(length(comadre$version)))
version<-("2.0.1")
version<-as.list(factor(length(comadre$version)))
for (i in 1:length(comadre$version)){
version[[i]]<-as.factor(paste(shQuote(comadre$version$Version[[i]], type="cmd"), collapse=", "))
}
for (i in 1:length(comadre$version)){
version[[i]]<-as.factor(paste(comadre$version$Version[[i]], type="cmd"))
}
for (i in 1:length(comadre$version)){
version[[i]]<-as.factor(paste(comadre$version$Version[[i]]))
}
comadre_2017<-cbind(comadre_df, PPMS_A, PPMS_U, PPMS_C, PPMS_F, classes_author, classes_organized, classes_number)
comadre_2017<-cbind(comadre_df, classes_author, classes_organized, classes_number)
(comadre$version$Version)
(comadre$version)
version<-as.list(factor(length(comadre$version)))
DateCreated<-as.list(factor(length(comadre$version)))
NumberAcceptedSpecies<-as.list(factor(length(comadre$version)))
NumberStudies<-as.list(factor(length(comadre$version)))
NumberMatrices<-as.list(factor(length(comadre$version)))
Agreement<-as.list(factor(length(comadre$version)))
version<-as.list(character(length(comadre$version)))
for (i in 1:length(comadre$version)){
version[[i]]<-as.factor(paste(comadre$version$Version[[i]]))
}
for (i in 1:length(comadre$version)){
version[[i]]<-as.factor(paste(comadre$version[[i]]$Version))
}
for (i in 1:length(comadre$version)){
version[[i]]<-as.factor(paste(comadre$version[[i]]$Version))
}
for (i in 1:length(compadre$version)){
version[[i]]<-as.character(paste(shQuote(compadre$version[[i]][,1], type="cmd"), collapse=", "))
}
for (i in 1:length(compadre$version)){
version[[i]]<-as.character(paste(shQuote(compadre$version[[i]]$Version, type="cmd"), collapse=", "))
}
x<-comadre$version
ls(x)
comadre2$version<-x
version<-as.list(character(length(x)))
version<-as.list(character(length(x$Version)))
for (i in 1:length(comadre$version)){
version[[i]]<-as.factor(paste(x[[i]]$Version))
}
for (i in 1:length(comadre$version)){
version[[i]]<-as.factor(paste(x$Version))
}
version<-as.list(character(length(comadre$version)))
for (i in 1:length(comadre$version)){
version[[i]]<-as.factor(paste(x$Version))
}
version<-as.list(factor(length(comadre$version)))
version<-as.list(factor(length(comadre$metadata)))
version<-as.list(factor(length(comadre_df)))
rm(version)
version<-as.list(factor(length(comadre_df)))
for (i in 1:length(comadre_df)){
version[[i]]<-as.factor(paste(x$Version))
}
version<-as.list(factor(length(1927)))
version<-as.list(factor(length(1:1927)))
for (i in 1:length(comadre_df)){
version[[i]]<-as.factor(paste(x$Version))
}
View(comadre_df)
version<-as.list(factor(length(classes_author)))
for (i in 1:length(classes_author)){
version[[i]]<-as.factor(paste(x$Version))
}
DateCreated<-as.list(character(length(classes_author)))
NumberAcceptedSpecies<-as.list(character(length(classes_author)))
NumberStudies<-as.list(factor(character(classes_author)))
NumberMatrices<-as.list(factor(character(classes_author)))
Agreement<-as.list(character(length(classes_author)))
DateCreated<-as.list(factor(length(classes_author)))
NumberAcceptedSpecies<-as.list(factor(length(classes_author)))
NumberStudies<-as.list(factor(length(classes_author)))
NumberMatrices<-as.list(factor(length(classes_author)))
Agreement<-as.list(factor(length(classes_author)))
ls(x)
for (i in 1:length(classes_author)){
DateCreated[[i]]<-as.factor(paste(x$DateCreated))
}
for (i in 1:length(classes_author)){
NumberAcceptedSpecies[[i]]<-as.factor(paste(x$NumberAcceptedSpecies))
}
for (i in 1:length(classes_author)){
NumberStudies[[i]]<-as.factor(paste(x$NumberStudies))
}
for (i in 1:length(classes_author)){
NumberMatrices[[i]]<-as.factor(paste(x$NumberMatrices))
}
for (i in 1:length(classes_author)){
Agreement[[i]]<-as.factor(paste(x$Agreement))
}
classes_author<-as.character(classes_author)
classes_number<-as.array(classes_number)
classes_organized<-as.character.factor(classes_organized)
classes_organized<-as.list(classes_organized)
classes_organized<-as.factor(classes_organized)
classes_organized<-as.character.factor(classes_organized)
classes_organized<-as.character(classes_organized)
###turn 4 part COMADRE object into flat csv ready to analysis
#1. load COMADRE R object
load("/Users/daniellebuss/Downloads/COMADRE_v.2.0.1.RData")
ls(comadre)
#2. get flat version of COMADRE metadata
comadre_df<-comadre$metadata
#3. Get flat string versions of all 4 matrices using matlab2r from popdemo
library(popdemo)
##Get string version of the matrix A string
PPMS_A<-numeric(length(comadre$mat))
for (i in 1:length(comadre$mat)){
PPMS_A[i]<-R2Matlab(comadre$mat[[i]]$matA,noquote=TRUE)
}
##Get string version of the matrix U string
PPMS_U<-numeric(length(comadre$mat))
for (i in 1:length(comadre$mat)){
PPMS_U[i]<-R2Matlab(comadre$mat[[i]]$matU,noquote=TRUE)
}
##Get string version of the matrix F string
PPMS_F<-numeric(length(comadre$mat))
for (i in 1:length(comadre$mat)){
PPMS_F[i]<-R2Matlab(comadre$mat[[i]]$matF,noquote=TRUE)
}
##Get string version of the matrix F string
PPMS_C<-numeric(length(comadre$mat))
for (i in 1:length(comadre$mat)){
PPMS_C[i]<-R2Matlab(comadre$mat[[i]]$matC,noquote=TRUE)
}
#create list of the class data for each matrix
head(comadre$mat)
classes_author<-as.list(factor(length(comadre$matrixClass)))
for (i in 1:length(comadre$matrixClass)){
classes_author[[i]]<-as.factor(paste(shQuote(comadre$matrixClass[[i]][,2], type="cmd"), collapse=", "))
}
classes_organized<-as.list(factor(length(comadre$matrixClass)))
for (i in 1:length(comadre$matrixClass)){
classes_organized[[i]]<-as.factor(paste(shQuote(comadre$matrixClass[[i]][,1], type="cmd"), collapse=", "))
}
classes_number<-as.list(factor(length(comadre$matrixClass)))
for (i in 1:length(comadre$matrixClass)){
classes_number[[i]]<-as.factor(paste(shQuote(comadre$matrixClass[[i]][,3], type="cmd"), collapse=", "))
}
##Get version data for each row
x<-comadre$version
ls(x)
version<-as.list(factor(length(classes_author)))
for (i in 1:length(classes_author)){
version[[i]]<-as.factor(paste(x$Version))
}
DateCreated<-as.list(factor(length(classes_author)))
for (i in 1:length(classes_author)){
DateCreated[[i]]<-as.factor(paste(x$DateCreated))
}
NumberAcceptedSpecies<-as.list(factor(length(classes_author)))
for (i in 1:length(classes_author)){
NumberAcceptedSpecies[[i]]<-as.factor(paste(x$NumberAcceptedSpecies))
}
NumberStudies<-as.list(factor(length(classes_author)))
for (i in 1:length(classes_author)){
NumberStudies[[i]]<-as.factor(paste(x$NumberStudies))
}
NumberMatrices<-as.list(factor(length(classes_author)))
for (i in 1:length(classes_author)){
NumberMatrices[[i]]<-as.factor(paste(x$NumberMatrices))
}
Agreement<-as.list(factor(length(classes_author)))
for (i in 1:length(classes_author)){
Agreement[[i]]<-as.factor(paste(x$Agreement))
}
classes_author<-as.list(factor(length(comadre$matrixClass)))
for (i in 1:length(comadre$matrixClass)){
classes_author[[i]]<-as.factor(paste(shQuote(comadre$matrixClass[[i]][,2], type="cmd"), collapse=", "))
}
classes_organized<-as.list(factor(length(comadre$matrixClass)))
for (i in 1:length(comadre$matrixClass)){
classes_organized[[i]]<-as.factor(paste(shQuote(comadre$matrixClass[[i]][,1], type="cmd"), collapse=", "))
}
classes_number<-as.list(factor(length(comadre$matrixClass)))
for (i in 1:length(comadre$matrixClass)){
classes_number[[i]]<-as.factor(paste(shQuote(comadre$matrixClass[[i]][,3], type="cmd"), collapse=", "))
}
classes_author<-sapply(classes_author, paste0, collapse="")
classes_number<-sapply(classes_number, paste0, collapse="")
classes_organized<-sapply(classes_organized, paste0, collapse="")
PPMS_A<-sapply(PPMS_A, paste0, collapse="")
PPMS_C<-sapply(PPMS_C, paste0, collapse="")
PPMS_F<-sapply(PPMS_F, paste0, collapse="")
PPMS_U<-sapply(PPMS_U, paste0, collapse="")
PPMS_C<-sapply(PPMS_C, paste0, collapse="")
PPMS_C<-as.character(PPMS_C)
PPMS_F<-as.character(PPMS_F)
PPMS_A<-as.character(PPMS_A)
PPMS_U<-as.character(PPMS_U)
comadre_2017<-cbind(comadre_df, classes_author, classes_organized, classes_number)
comadre_2017<-cbind(comadre_df, classes_author, classes_organized, classes_number, PPMS_A)
comadre_2017<-cbind(comadre_df, classes_author, classes_organized, classes_number, PPMS_A, PPMS_C)
comadre_2017<-cbind(comadre_df, classes_author, classes_organized, classes_number, PPMS_A, PPMS_C, PPMS_U, PPMS_F)
names(comadre_2017)
New_df<-data.frame(comadre_2017$SpeciesAuthor,comadre_2017$SpeciesAccepted,comadre_2017$CommonName, comadre_2017$GenusAccepted,comadre_2017$Family,comadre_2017$Order, comadre_2017$Class, comadre_2017$Phylum, comadre_2017$Kingdom, comadre_2017$OrganismType)
comadre_2017<-cbind(comadre_df, classes_author, classes_organized, classes_number, PPMS_A, PPMS_C, PPMS_U, PPMS_F, version)
comadre_2017<-cbind(comadre_df, classes_author, classes_organized, classes_number, PPMS_A, PPMS_C, PPMS_U, PPMS_F)
Agreement<-sapply(Agreement, paste0, collapse="")
version<-sapply(version, paste0, collapse="")
NumberAcceptedSpecies<-sapply(NumberAcceptedSpecies, paste0, collapse="")
NumberMatrices<-sapply(NumberMatrices, paste0, collapse="")
NumberStudies<-sapply(NumberStudies, paste0, collapse="")
DateCreated<-sapply(DateCreated, paste0, collapse="")
comadre_2017<-cbind(comadre_df, classes_author, classes_organized, classes_number, PPMS_A, PPMS_C, PPMS_U, PPMS_F, Agreement)
comadre_2017<-cbind(comadre_df, classes_author, classes_organized, classes_number, PPMS_A, PPMS_C, PPMS_U, PPMS_F, Agreement, version)
comadre_2017<-cbind(comadre_df, classes_author, classes_organized, classes_number, PPMS_A, PPMS_C, PPMS_U, PPMS_F, Agreement, version, NumberAcceptedSpecies, NumberMatrices, NumberStudies, DateCreated)
head(comadre_2017$PPMS_A)
comadre_2017$PPMS_A[[1]]
comadre_2017$PPMS_A[1]
PPMS_A<-numeric(length(comadre$mat))
for (i in 1:length(comadre$mat)){
PPMS_A[i]<-R2Matlab(comadre$mat[[i]]$matA,noquote=TRUE)
}
head(PPMS_A)
PPMS_A<-as.character(PPMS_A)
PPMS_A<-as.character(PPMS_A)
PPMS_A<-sapply(PPMS_A, paste0, collapse="")
PPMS_A<-as.character(PPMS_A)
PPMS_A<-numeric(length(comadre$mat))
for (i in 1:length(comadre$mat)){
PPMS_A[i]<-R2Matlab(comadre$mat[[i]]$matA,noquote=TRUE)
}
PPMS_A<-unlist(PPMS_A, recursive = TRUE, use.names = TRUE)
PPMS_A<-as.factor(PPMS_A)
head(PPMS_A)
PPMS_A<-as.character(PPMS_A)
head(PPMS_A)
PPMS_U<-numeric(length(comadre$mat))
for (i in 1:length(comadre$mat)){
PPMS_U[i]<-R2Matlab(comadre$mat[[i]]$matU,noquote=TRUE)
}
PPMS_U<-unlist(PPMS_U, recursive = TRUE, use.names = TRUE)
PPMS_U<-as.factor(PPMS_U)
PPMS_U<-as.character(PPMS_U)
head(PPMS_U)
PPMS_F<-numeric(length(comadre$mat))
for (i in 1:length(comadre$mat)){
PPMS_F[i]<-R2Matlab(comadre$mat[[i]]$matF,noquote=TRUE)
}
PPMS_F<-unlist(PPMS_F, recursive = TRUE, use.names = TRUE)
PPMS_F<-as.factor(PPMS_F)
PPMS_F<-as.character(PPMS_F)
head(PPMS_F)
PPMS_C<-numeric(length(comadre$mat))
for (i in 1:length(comadre$mat)){
PPMS_C[i]<-R2Matlab(comadre$mat[[i]]$matC,noquote=TRUE)
}
PPMS_C<-unlist(PPMS_C, recursive = TRUE, use.names = TRUE)
PPMS_C<-as.factor(PPMS_C)
PPMS_C<-as.character(PPMS_C)
head(PPMS_C)
comadre_2017<-cbind(comadre_df, classes_author, classes_organized, classes_number, PPMS_A, PPMS_C, PPMS_U, PPMS_F, Agreement, version, NumberAcceptedSpecies, NumberMatrices, NumberStudies, DateCreated)
comadre_2017$PPMS_A[1]
head(comadre_2017$PPMS_A)
head(comadre_2017$classes_organized)
comadre_2017$classes_organized<-gsub(", ", "|", comadre_2017$classes_organized)
head(comadre_2017$classes_organized)
comadre_2017$classes_organized<-gsub("\", "|", comadre_2017$classes_organized)
comadre_2017$classes_organized<-gsub("\", "|", comadre_2017$classes_organized)
comadre_2017$classes_organized<-gsub(\, |, comadre_2017$classes_organized)
comadre_2017$classes_organized<-gsub("\", "|", comadre_2017$classes_organized)
head(comadre_2017$classes_organized)
head(comadre_2017$classes_organized)
head(comadre_2017$classes_organized)
head(comadre_2017$classes_organized)
x
)
)
head(comadre_2017$classes_organized)
comadre_2017$classes_organized<-gsub("\", "|", comadre_2017$classes_organized)
comadre_2017$classes_organized<-gsub("\", "|", comadre_2017$classes_organized)
)
comadre_2017$classes_organized<-gsub(" \", "|", comadre_2017$classes_organized)
write.csv(comadre_2017, "comadre_2017.csv")
write.csv(comadre_2017, "comadre_2017.csv")
getwd()
217+188
setwd("~/Sites/demography_database/app/compadre")
df<-read.csv("comadre_migration_2017.csv", header=T)
names(df)
names(df)[82]<-"species_gisd_status"
install.packages("originr")
library(originr)
sp_list<-unique(df$species_accepted)
sp_list<-as.list(sp_list)
sp_list<-unique(df$species_accepted)
sp_list<-as.list(sp_list)
sp_list<-unique(df$species_accepted)
df2$sp_list<-sp_list
gisd(sp_list, simplify=TRUE)
df2<-gisd(sp_list, simplify=TRUE)
ls(df2)
summary(df2)
df3<-data.frame(df2)
species<-df2[[2]]
species<-df2[2]
species<-df2[[2]]
species<-df2[[2]][[2]]
species<-df2[[1]][[2]]
species<-df2(species)
str(df2)
head(str(df2))
species<-unlist(df2)
species<-unlist(df2[[1]])
species<-unlist(df2[[2]][[2]])
species<-laply(x_[[1]], identity)
install.packages("plyr")
library(plyr)
species<-laply(x_[[1]], identity)
species<-laply(df2_[[1]], identity)
species<-laply(df2[[1]], identity)
laply(df2[[1]], identity)
laply(df2[[2]], identity)
laply(df2[2]1, identity)
laply(df2[2], identity)
laply(df2[[2]][2], identity)
?laply
laply(df2[[2]])
laply(df2[[2]], identity)
head(df3)
laply(df2[[1]][1], identity)
laply(df2[[1]][[1]], identity)
laply(df2[[1]], identity)
?gisd
??gisd
install.packages("taxize")
install.packages("traits")
??g_invasive
df2<-g_invasive(sp_list, simplify=FALSE, verbose=TRUE)
library(traits)
df2<-g_invasive(sp_list, simplify=FALSE, verbose=TRUE)
View(df2)
df2<-g_invasive(sp_list, simplify=TRUE)
sp_list<-unique(df$species_accepted)
sp_list<-gsub("_", " ", sp_list)
head(sp_list)
df2<-g_invasive(sp_list, simplify=TRUE)
View(df2)
summary(df2)
summary(df2$status)
statuss<-as.factor(df2$status)
summary(statuss)
df_inv<-g_invasive(sp_list, simplify=FALSE)
View(df_inv)
sp_list<-unique(df$species_accepted)
sp_list_sample<-unique(df$species_accepted[1:10])
test<-df[1:25,]
sp_list_sample<-unique(test$species_accepted)
sp_list
sp_list_sample<-unique(test$species_accepted)
sp_list_sample<-as.factor(test$species_accepted)
sp_list_sample2<-levels(sp_list_sample)
sp_list_sample<-as.factor(test$species_accepted)
x<-as.factor(test$species_accepted)
View(test)
x<-as.factor(test$species_accepted)
x<-as.list(test$species_accepted)
x<-as.factor(x)
x
x<-as.factor(test$species_accepted)
x<-as.chatacter(test$species_accepted)
x<-as.character(test$species_accepted)
x
x<-unique(x)
x
sp_list_sample<-as.list(c("Abax_parallelepipedus", "Accipiter_cooperii", "Accipiter_gentilis", "Accipiter_nisus", "Acinonyx_jubatus","Acipenser_fulvescens")
sp_list_sample<-as.list(c("Abax_parallelepipedus", "Accipiter_cooperii", "Accipiter_gentilis", "Accipiter_nisus", "Acinonyx_jubatus","Acipenser_fulvescens"))
sp_list_sample<-as.list(c("Abax_parallelepipedus", "Accipiter_cooperii", "Accipiter_gentilis", "Accipiter_nisus", "Acinonyx_jubatus","Acipenser_fulvescens"))
df_inv<-gisd(sp_list_sample, simplify=TRUE)
install.packages("originr")
library(originr)
??gisd
df_inv<-gisd(sp_list_sample, simplify=TRUE)
df_inv[[2]][[2]]
df_inv[[2]][[2]][[1]]
df_inv[[4]][[2]][[1]]
df_inv[[5]][[2]][[1]]
df_inv[[1]][[2]][[1]]
df_inv[[1]]
df_inv[[1]]$status
df3<-c(df_inv[[1]]$status, df_inv[[2]]$status, df_inv[[3]]$status, df_inv[[4]]$status, df_inv[[5]]$status, df_inv[[6]]$status)
f <- function(x) {
for(i in 1:length(dv_inv)) {
print(df_inv[[i]]$status)
}
}
f(x)
f <- function(x) {
for(i in 1:length(df_inv)) {
print(df_inv[[i]]$status)
}
}
f(x)
df_inv<-gisd(sp_list, simplify=TRUE)
f <- function(x) {
for(i in 1:length(df_inv)) {
print(df_inv[[i]]$status)
}
}
f(x)
df_inv<-gisd(sp_list, simplify=FALSE, verbose=TRUE)
sp_list_test<-
sp_list<-gsub("_", " ", sp_list)
df_inv<-gisd(sp_list, simplify=TRUE)
??gisd
f <- function(x) {
for(i in 1:length(df_inv)) {
print(df_inv[[i]]$status)
}
}
f(x)
rm(x)
f <- function(x) {
for(i in 1:length(df_inv)) {
print(df_inv[[i]]$status)
}
}
f(x)
f <- function(x) {
for(i in 1:length(df_inv)) {
print(df_inv[[i]]$status)
}
}
f(x)
a<-f(x)
test<-sp_list[1:25]
df_inv<-gisd(test, simplify=TRUE)
f <- function(x) {
for(i in 1:length(df_inv)) {
print(df_inv[[i]]$status)
}
}
f(x)
df_invas<- data.frame(species_accepted = rep(NA,length(df_inv)), status = NA)
f <- function(x) {
for(i in 1:length(df_inv)) {
df_invas$species_accepted[i]<-(df_inv[[i]]$species)
df_invas$status[i]<-(df_inv[[i]]$status)
}
}
f(x)
for(i in 1:length(df_inv)) {
df_invas$species_accepted[i]<-(df_inv[[i]]$species)
df_invas$status[i]<-(df_inv[[i]]$status)
}
df_invas
df_inv<-gisd(sp_list, simplify=TRUE)
df_invas<- data.frame(species_accepted = rep(NA,length(df_inv)), status = NA)
rm(df2)
for(i in 1:length(df_inv)) {
df_invas$species_accepted[i]<-(df_inv[[i]]$species)
df_invas$status[i]<-(df_inv[[i]]$status)
}
View(df_invas)
summary(df_invas)
summary(df_invas$status)
a<-(df_invas$status)
levels(a)
a<-as.factor(df_invas$status)
levels(a)
df_invas$status<-gsub("Not in GISD", "FALSE", df_invas$status)
View(df_invas)
df_invas$status<-gsub("Invasive", "TRUE", df_invas$status)
View(df_invas)
df_invas$species_accepted<-gsub(" ", "_", df_invas$species_accepted)
head(df_invas)
names(df)
new<-merge(df, df_invas, by="species_accepted")
new<-merge(df, df_invas, by="species_accepted", all.x=T)
new<-merge(df, df_invas, by="species_accepted", all=T)
new<-merge(df, df_invas, by="species_accepted", all.x=T)
View(new)
names(new)
new$species_gisd_status<-new$status
head(new$species_gisd_status)
summary(new$species_gisd_status)
new2<-new[,-115]
names(new2)
new<-new[,-115]
write.csv(new, "comadre_migration_2017b.csv")
View(new)
